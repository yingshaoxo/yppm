syntax = "proto3";

// "Anyone can ask and comment in this website", since that is the goal, I decided to cut the account system, anyone can simply use a username to do operations

service question_and_answer_service {
    //No JWT
    rpc ask_yingshaoxo_ai (Ask_Yingshaoxo_Ai_Request) returns (Ask_Yingshaoxo_Ai_Response); 

    rpc visitor_search (Search_Request) returns (Search_Response);
    rpc visitor_get_a_post (Get_A_Post_Request) returns (Get_A_Post_Response); 
    rpc visitor_get_comment_list_by_id_list (Get_Comment_List_By_Id_List_Request) returns (Get_Comment_List_By_Id_List_Response); 

    //Normal User
    rpc user_add_post (Add_Post_Request) returns (Add_Post_Response); //anyone can do it
    rpc user_comment_post (Comment_Post_Request) returns (Comment_Post_Response);//anyone can do it
    // Why I did not make a hide post api? Because if you want to do censorship, you should stop user from sending it at the beginning than delete their post after they sent out
    // Why I did not make a modify api? Because others should not modify your post
    // Why I did not make a delete api? Because I never wanted to delete my own post in real life

    rpc user_download_backup_data(Download_Backup_Data_Request) returns (Download_Backup_Data_Response); // you need to provide username to download all data related to a user

    //Admin
    rpc admin_download_backup_data(Admin_Download_Backup_Data_Request) returns (Admin_Download_Backup_Data_Response);
    rpc admin_upload_backup_data(Admin_Upload_Backup_Data_Request) returns (Admin_Upload_Backup_Data_Response);
    // admin can use data clean tech to remove garbage data in database based on yingshaoxo's willing, for example, un_friendly AD.
    /*
    Community data merge guide:

    1. Check if it is spam, AD
    2. If it is spam or AD, add tags. And it is a repeated one, delete it
    3. If it is not spam or AD, merge it into old one, tell them it may be a fake adding
    */
}

/*
enum User_Type {
    user = 1;
    admin = 2;
}
*/

/*
message A_User {
    int64 create_time_in_10_numbers_timestamp_format = 1;
    string id = 2;
    string email = 3; // make sure to tell user they could use a new type of email system, the yingshaoxo_email_protocol
    string password = 4;
    string user_type = 5;
    string contact_info = 5; // phone, communication app account, anything that could be used to contact that user
    string json_web_token = 6;
}
*/

/*
yingshaoxo_email_protocol


You simply define one single POST API, let anyone wants to send message to you, send a post request to your subdomain, for example, email.your_domain.com:

Something like:

Request: {title, content, author_email_url}

Response: {success, error}


And another thing you have to do is make a 20MB size of "spam,AD,normal" text AI classifier


#idea #yingshaoxo
*/

message A_Post {
    string owner_id = 1; //owner_id is actually the safe username
    string id = 2;
    // id == title[:30].replace(" ", "_").replace("-", "_") + 6 characters long random_hash
    string title = 3;
    string description = 4;
    repeated string comment_id_list = 5; 
    int64 create_time_in_10_numbers_timestamp_format = 8;
    string tag = 9; // for example, [ad, spam, adult]
}

message A_Comment {
    string owner_id = 1;
    string id = 2;
    // id == owner_id[:30] + 6 characters long random_hash
    string parent_post_id = 3;
    string parent_post_owner_id = 4;
    string description = 5;
    int64 create_time_in_10_numbers_timestamp_format = 999;
    string tag = 9; // for example, [ad, spam, adult]
}

message Ask_Yingshaoxo_Ai_Request {
    string input = 1;
}

message Ask_Yingshaoxo_Ai_Response {
    string error = 1;
    string answers = 2;
}

message Search_Request {
    string search_input = 1;
    int64 page_size = 2;
    int64 page_number = 3;
    string owner_id = 4;
}

message Search_Response {
    optional string error = 1;
    repeated A_Post post_list = 2;
    repeated A_Comment comment_list = 2;
}

message Get_A_Post_Request {
    string id = 1;
}

message Get_A_Post_Response {
    optional string error = 1;
    A_Post post = 2;
}

message Get_Comment_List_By_Id_List_Request {
    repeated string comment_id_list = 1;
}

message Get_Comment_List_By_Id_List_Response {
    optional string error = 1;
    repeated A_Comment comment_list = 2;
}

message Add_Post_Request {
    string username = 0;
    A_Post a_post = 1;
}

message Add_Post_Response {
    string error = 1;
    bool success = 2;
    string post_id = 3;
}

message Comment_Post_Request {
    string username = 0;
    A_Comment a_comment = 1;
}

message Comment_Post_Response {
    string error = 1;
    bool success = 2;
    string comment_id = 3;
}

message Download_Backup_Data_Request {
    string username = 1;
}

message Download_Backup_Data_Response {
    string error = 1;
    string file_name = 2;
    string file_bytes_in_base64_format = 3;
}

message Admin_Download_Backup_Data_Request {
    string token = 1;
}

message Admin_Download_Backup_Data_Response {
    string error = 1;
    string file_name = 2;
    string file_bytes_in_base64_format = 3;
}

message Admin_Upload_Backup_Data_Request {
    string token = 1;
    string file_bytes_in_base64_format = 2;
}

message Admin_Upload_Backup_Data_Response {
    string error = 1;
    bool success = 2;
}
