syntax = "proto3";

/*
## Yingshaoxo Torrent Protocol

1. For all those clients, it will need at least one tracker service. That service has an public ip address. It only need to have one open port.

2. When a client open a new torrent, I mean seeding. That client will do a report to the tracker with the following infomation: {"has_public_ip": "*.*.*.*", "hash": "", "size": 100}

3. When a client want to download a file with certain hash from a magnet link, it will do a asking to the tracker. If the tracker found there has a resource that matchs the hash code, if the seeder has public ip address, then it will let the client do a download directly from that seeder, otherwise, if that seeder does not have an public ip address, then the tracker will ask the seeder to upload its resources first, then transfer it to the client that asks the resources.
*/

service ytorrent_service {
    rpc seed (Seed_Request) returns (Seed_Response); // user should do this almost all the time, the default polling time is 60 seconds
    rpc search (Search_Request) returns (Search_Response);
    rpc download_resource_info (Download_Resource_Info_Request) returns (Download_Resource_Info_Response); // user should do this almost all the time if they want to download something by use using a hash string
    rpc download (Download_Request) returns (Download_Response); // user should do this almost all the time if they want to download something, the default polling time is 60 seconds
    rpc upload (Upload_Request) returns (Upload_Response);
    rpc get_shared_tracker_list (Get_Shared_Tracker_List_Request) returns (Get_Shared_Tracker_List_Response); // When the server could directly get /version from client host ip, which means they has public ip, then we add that ip into this list
    rpc version (Version_Request) returns (Version_Response);
}

message Ytorrent_Config {
    // default path for this configuration.json is in ~/.ytorrent/configuration.json
    // and for tracker_ip_or_url_list, you should have another file at ~/.ytorrent/tracker_urls.txt
    int64 default_remote_service_port = 1; // dedault 1111
    string exposed_seeder_tracker_address = 12; //the seeder's tracker address, should be a public address, could be none
    int64 default_local_service_port = 2; // dedault 1212
    int64 file_segments_memory_pool_size_in_mb = 3; // default 1000 mb
    int64 max_acceptable_file_segment_size_in_mb = 4; // default 1 mb
    int64 polling_waiting_time_in_seconds = 5; // default 60 seconds
    repeated string tracker_ip_or_url_list = 6;  // it is actually the server service ip/url, if non of those tracker is avaliable, then the search will return offline 'built-in chat data', for example, 'yingshaoxo's saying'
    string download_folder_path = 7;
}

message A_Resource {
    string name = 1;
    bool is_single_file = 2; // in client, when search, show single file first
    string file_or_folder_hash = 3; // server will save this information into a dict where key is the file_or_folder_hash, where value is a list of A_Resource object
    string file_or_folder_size_in_bytes = 4; // just a symbol for human reading, may wrong
    string root_folder = 5; // the base folder for those shared files, if download complete == False, you have to change this to local storage path
    repeated string folder_path_list_relative_to_root_folder = 6;
    repeated string file_path_list_relative_to_root_folder = 7;
    repeated int64 file_size_in_bytes_list = 8;
    repeated string file_hash_list = 9;
    repeated bool file_download_status_list = 10;// if download_complete==False, we'll iterate this dict, to download file that download_status == False; if you do the seed, this dict will be true for all values
    bool download_complete = 11;// if you do the seed, the download_complete will be True at the beginning
    string exposed_seeder_tracker_address = 12; //the seeder's tracker address, should be a public address, could be none
}

message Need_To_Upload_Notification {
    string file_or_folder_hash = 1;
    string file_path_relative_to_root_folder = 2;
    int64 file_segment_size_in_bytes = 3; // by default, the server will only accept 1MB segment request, but it can get changed in envirnoment configuration
    int64 segment_number = 4; // start from 1
}

message File_Segment {
    string file_or_folder_hash = 1;
    string file_path_relative_to_root_folder = 2;
    int64 file_segment_size_in_bytes = 3; // by default, the server will only accept 1MB segment request, but it can get changed in envirnoment configuration
    int64 segment_number = 4; // start from 1
    string file_segment_bytes_in_base64 = 5;
    string _current_time_in_timestamp = 6;
}

message A_Whole_File {
    // we only create this object when we need to download a file, if we successfully get this file downloaded, we'll release it to disk, then change the resource_file_download status to True
    string file_hash = 1;
    string root_folder = 2;
    string file_name = 3;
    repeated File_Segment file_segment_list = 4; // when client wants to download something, the client will generate all file_segments from A_Project, A_Project has file_list, each file can be seperated to file_segments. At the beginning, file_segment base64_data part can be None
}

message Seed_Request {
    A_Resource a_resource = 1;
}

message Seed_Response {
    string error = 1;
    bool success = 2;
    bool someone_needs_you_to_upload_your_file = 3;
    repeated Need_To_Upload_Notification need_to_upload_notification_list = 4;
}

message Upload_Request {
    Need_To_Upload_Notification need_to_upload_notification = 1;
    string file_segment_bytes_in_base64 = 2;
}

message Upload_Response {
    string error = 1;
    string success = 2;
}

message Search_Request {
    string search_input = 1;
    int64 page_size = 2;
    int64 page_number = 3;
}

message Search_Response {
    optional string error = 1;
    repeated A_Resource resource_list = 2;
}

message Download_Resource_Info_Request {
    string file_or_folder_hash = 1;
}

message Download_Resource_Info_Response {
    string error = 1;
    bool try_it_later_when_other_need_to_upload = 2;
    A_Resource a_resource = 3;
}

message Download_Request {
    Need_To_Upload_Notification need_to_upload_notification = 1;
}

message Download_Response {
    string error = 1;
    bool try_it_later_when_other_need_to_upload = 2;
    string file_segment_bytes_in_base64 = 3;
}


message Get_Shared_Tracker_List_Request {
} 

message Get_Shared_Tracker_List_Response {
    repeated string tracker_ip_list = 1;
} 

message Version_Request {
} 

message Version_Response {
    string name = 1; // default "magic_torrent"
    int64 version_code = 2; //1, whenever a number is greater than this, will be considered a upgraded version
} 
